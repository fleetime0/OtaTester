/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.15.v202410041619.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_OTA_FOTAMPU_UPDATE_HPP_
#define V1_COMMONAPI_OTA_FOTAMPU_UPDATE_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace commonapi {
namespace ota {

class FOTAMPUUpdate {
public:
    virtual ~FOTAMPUUpdate() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    struct MPUUpdateTaskBuildingResp : CommonAPI::Struct< uint16_t, uint8_t> {
    
        MPUUpdateTaskBuildingResp()
        {
            std::get< 0>(values_) = 0u;
            std::get< 1>(values_) = 0u;
        }
        MPUUpdateTaskBuildingResp(const uint16_t &_TaskID, const uint8_t &_BuildingResult)
        {
            std::get< 0>(values_) = _TaskID;
            std::get< 1>(values_) = _BuildingResult;
        }
        inline const uint16_t &getTaskID() const { return std::get< 0>(values_); }
        inline void setTaskID(const uint16_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getBuildingResult() const { return std::get< 1>(values_); }
        inline void setBuildingResult(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const MPUUpdateTaskBuildingResp& _other) const {
        return (getTaskID() == _other.getTaskID() && getBuildingResult() == _other.getBuildingResult());
        }
        inline bool operator!=(const MPUUpdateTaskBuildingResp &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct MPUUpdateStopReq : CommonAPI::Struct< uint16_t, uint8_t> {
    
        MPUUpdateStopReq()
        {
            std::get< 0>(values_) = 0u;
            std::get< 1>(values_) = 0u;
        }
        MPUUpdateStopReq(const uint16_t &_TaskID, const uint8_t &_StopType)
        {
            std::get< 0>(values_) = _TaskID;
            std::get< 1>(values_) = _StopType;
        }
        inline const uint16_t &getTaskID() const { return std::get< 0>(values_); }
        inline void setTaskID(const uint16_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getStopType() const { return std::get< 1>(values_); }
        inline void setStopType(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const MPUUpdateStopReq& _other) const {
        return (getTaskID() == _other.getTaskID() && getStopType() == _other.getStopType());
        }
        inline bool operator!=(const MPUUpdateStopReq &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct MPUUpdateStopResp : CommonAPI::Struct< uint16_t, uint8_t, uint8_t> {
    
        MPUUpdateStopResp()
        {
            std::get< 0>(values_) = 0u;
            std::get< 1>(values_) = 0u;
            std::get< 2>(values_) = 0u;
        }
        MPUUpdateStopResp(const uint16_t &_TaskID, const uint8_t &_StopType, const uint8_t &_StopResult)
        {
            std::get< 0>(values_) = _TaskID;
            std::get< 1>(values_) = _StopType;
            std::get< 2>(values_) = _StopResult;
        }
        inline const uint16_t &getTaskID() const { return std::get< 0>(values_); }
        inline void setTaskID(const uint16_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getStopType() const { return std::get< 1>(values_); }
        inline void setStopType(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline const uint8_t &getStopResult() const { return std::get< 2>(values_); }
        inline void setStopResult(const uint8_t &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const MPUUpdateStopResp& _other) const {
        return (getTaskID() == _other.getTaskID() && getStopType() == _other.getStopType() && getStopResult() == _other.getStopResult());
        }
        inline bool operator!=(const MPUUpdateStopResp &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct MPUInstallStartResp : CommonAPI::Struct< uint16_t, uint8_t> {
    
        MPUInstallStartResp()
        {
            std::get< 0>(values_) = 0u;
            std::get< 1>(values_) = 0u;
        }
        MPUInstallStartResp(const uint16_t &_TaskID, const uint8_t &_StartInstallResult)
        {
            std::get< 0>(values_) = _TaskID;
            std::get< 1>(values_) = _StartInstallResult;
        }
        inline const uint16_t &getTaskID() const { return std::get< 0>(values_); }
        inline void setTaskID(const uint16_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getStartInstallResult() const { return std::get< 1>(values_); }
        inline void setStartInstallResult(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const MPUInstallStartResp& _other) const {
        return (getTaskID() == _other.getTaskID() && getStartInstallResult() == _other.getStartInstallResult());
        }
        inline bool operator!=(const MPUInstallStartResp &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct MPUStatusSwitchReq : CommonAPI::Struct< uint16_t, uint8_t> {
    
        MPUStatusSwitchReq()
        {
            std::get< 0>(values_) = 0u;
            std::get< 1>(values_) = 0u;
        }
        MPUStatusSwitchReq(const uint16_t &_TaskID, const uint8_t &_SwitchType)
        {
            std::get< 0>(values_) = _TaskID;
            std::get< 1>(values_) = _SwitchType;
        }
        inline const uint16_t &getTaskID() const { return std::get< 0>(values_); }
        inline void setTaskID(const uint16_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getSwitchType() const { return std::get< 1>(values_); }
        inline void setSwitchType(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const MPUStatusSwitchReq& _other) const {
        return (getTaskID() == _other.getTaskID() && getSwitchType() == _other.getSwitchType());
        }
        inline bool operator!=(const MPUStatusSwitchReq &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct MPUStatusSwitchResp : CommonAPI::Struct< uint16_t, uint8_t, uint8_t> {
    
        MPUStatusSwitchResp()
        {
            std::get< 0>(values_) = 0u;
            std::get< 1>(values_) = 0u;
            std::get< 2>(values_) = 0u;
        }
        MPUStatusSwitchResp(const uint16_t &_TaskID, const uint8_t &_SwitchType, const uint8_t &_SwitchResult)
        {
            std::get< 0>(values_) = _TaskID;
            std::get< 1>(values_) = _SwitchType;
            std::get< 2>(values_) = _SwitchResult;
        }
        inline const uint16_t &getTaskID() const { return std::get< 0>(values_); }
        inline void setTaskID(const uint16_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getSwitchType() const { return std::get< 1>(values_); }
        inline void setSwitchType(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline const uint8_t &getSwitchResult() const { return std::get< 2>(values_); }
        inline void setSwitchResult(const uint8_t &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const MPUStatusSwitchResp& _other) const {
        return (getTaskID() == _other.getTaskID() && getSwitchType() == _other.getSwitchType() && getSwitchResult() == _other.getSwitchResult());
        }
        inline bool operator!=(const MPUStatusSwitchResp &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct MPUGetStatusResp : CommonAPI::Struct< uint16_t, uint8_t> {
    
        MPUGetStatusResp()
        {
            std::get< 0>(values_) = 0u;
            std::get< 1>(values_) = 0u;
        }
        MPUGetStatusResp(const uint16_t &_TaskID, const uint8_t &_CurrentStatus)
        {
            std::get< 0>(values_) = _TaskID;
            std::get< 1>(values_) = _CurrentStatus;
        }
        inline const uint16_t &getTaskID() const { return std::get< 0>(values_); }
        inline void setTaskID(const uint16_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getCurrentStatus() const { return std::get< 1>(values_); }
        inline void setCurrentStatus(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const MPUGetStatusResp& _other) const {
        return (getTaskID() == _other.getTaskID() && getCurrentStatus() == _other.getCurrentStatus());
        }
        inline bool operator!=(const MPUGetStatusResp &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct MPUGetUpdateLogReq : CommonAPI::Struct< uint16_t, std::string> {
    
        MPUGetUpdateLogReq()
        {
            std::get< 0>(values_) = 0u;
            std::get< 1>(values_) = "";
        }
        MPUGetUpdateLogReq(const uint16_t &_TaskID, const std::string &_url)
        {
            std::get< 0>(values_) = _TaskID;
            std::get< 1>(values_) = _url;
        }
        inline const uint16_t &getTaskID() const { return std::get< 0>(values_); }
        inline void setTaskID(const uint16_t &_value) { std::get< 0>(values_) = _value; }
        inline const std::string &getUrl() const { return std::get< 1>(values_); }
        inline void setUrl(const std::string &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const MPUGetUpdateLogReq& _other) const {
        return (getTaskID() == _other.getTaskID() && getUrl() == _other.getUrl());
        }
        inline bool operator!=(const MPUGetUpdateLogReq &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct MPUGetUpdateLogResp : CommonAPI::Struct< uint16_t, uint8_t> {
    
        MPUGetUpdateLogResp()
        {
            std::get< 0>(values_) = 0u;
            std::get< 1>(values_) = 0u;
        }
        MPUGetUpdateLogResp(const uint16_t &_TaskID, const uint8_t &_UploadResult)
        {
            std::get< 0>(values_) = _TaskID;
            std::get< 1>(values_) = _UploadResult;
        }
        inline const uint16_t &getTaskID() const { return std::get< 0>(values_); }
        inline void setTaskID(const uint16_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getUploadResult() const { return std::get< 1>(values_); }
        inline void setUploadResult(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const MPUGetUpdateLogResp& _other) const {
        return (getTaskID() == _other.getTaskID() && getUploadResult() == _other.getUploadResult());
        }
        inline bool operator!=(const MPUGetUpdateLogResp &_other) const {
            return !((*this) == _other);
        }
    
    };
};

const char* FOTAMPUUpdate::getInterface() {
    return ("commonapi.ota.FOTAMPUUpdate:v1_0");
}

CommonAPI::Version FOTAMPUUpdate::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}


} // namespace ota
} // namespace commonapi
} // namespace v1

namespace CommonAPI {
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COMMONAPI_OTA_FOTAMPU_UPDATE_HPP_
