/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.15.v202410041637.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v1/commonapi/ota/FOTAMPUUpdateSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace commonapi {
namespace ota {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createFOTAMPUUpdateSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< FOTAMPUUpdateSomeIPProxy>(_address, _connection);
}

void initializeFOTAMPUUpdateSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:commonapi.ota.FOTAMPUUpdate:v1_0:commonapi.ota.FOTAMPUUpdate",
        0x1010, 0x4, 1, 0);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "commonapi.ota.FOTAMPUUpdate:v1_0",
        &createFOTAMPUUpdateSomeIPProxy);
}

INITIALIZER(registerFOTAMPUUpdateSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeFOTAMPUUpdateSomeIPProxy);
}

FOTAMPUUpdateSomeIPProxy::FOTAMPUUpdateSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection)
{
}

FOTAMPUUpdateSomeIPProxy::~FOTAMPUUpdateSomeIPProxy() {
}



void FOTAMPUUpdateSomeIPProxy::BldUpdtTask(std::string _MPUUpdateTaskBuildingReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUUpdateTaskBuildingResp &_MPUUpdateTaskBuildingResp, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_MPUUpdateTaskBuildingReq(_MPUUpdateTaskBuildingReq, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< FOTAMPUUpdate::MPUUpdateTaskBuildingResp, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUUpdateTaskBuildingRespDeployment_t> deploy_MPUUpdateTaskBuildingResp(static_cast< ::v1::commonapi::ota::FOTAMPUUpdate_::MPUUpdateTaskBuildingRespDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                FOTAMPUUpdate::MPUUpdateTaskBuildingResp,
                ::v1::commonapi::ota::FOTAMPUUpdate_::MPUUpdateTaskBuildingRespDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_MPUUpdateTaskBuildingReq,
        _internalCallStatus,
        deploy_MPUUpdateTaskBuildingResp);
    _MPUUpdateTaskBuildingResp = deploy_MPUUpdateTaskBuildingResp.getValue();
}

std::future<CommonAPI::CallStatus> FOTAMPUUpdateSomeIPProxy::BldUpdtTaskAsync(const std::string &_MPUUpdateTaskBuildingReq, BldUpdtTaskAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_MPUUpdateTaskBuildingReq(_MPUUpdateTaskBuildingReq, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< FOTAMPUUpdate::MPUUpdateTaskBuildingResp, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUUpdateTaskBuildingRespDeployment_t> deploy_MPUUpdateTaskBuildingResp(static_cast< ::v1::commonapi::ota::FOTAMPUUpdate_::MPUUpdateTaskBuildingRespDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                FOTAMPUUpdate::MPUUpdateTaskBuildingResp,
                ::v1::commonapi::ota::FOTAMPUUpdate_::MPUUpdateTaskBuildingRespDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_MPUUpdateTaskBuildingReq,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< FOTAMPUUpdate::MPUUpdateTaskBuildingResp, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUUpdateTaskBuildingRespDeployment_t > _MPUUpdateTaskBuildingResp) {
            if (_callback)
                _callback(_internalCallStatus, _MPUUpdateTaskBuildingResp.getValue());
        },
        std::make_tuple(deploy_MPUUpdateTaskBuildingResp));
}

void FOTAMPUUpdateSomeIPProxy::StwrTrsmtPrgs(uint16_t _MPUTransmitProgressReq, CommonAPI::CallStatus &_internalCallStatus, std::string &_MPUTransmitProgressResp, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_MPUTransmitProgressReq(_MPUTransmitProgressReq, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_MPUTransmitProgressResp(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x2),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_MPUTransmitProgressReq,
        _internalCallStatus,
        deploy_MPUTransmitProgressResp);
    _MPUTransmitProgressResp = deploy_MPUTransmitProgressResp.getValue();
}

std::future<CommonAPI::CallStatus> FOTAMPUUpdateSomeIPProxy::StwrTrsmtPrgsAsync(const uint16_t &_MPUTransmitProgressReq, StwrTrsmtPrgsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_MPUTransmitProgressReq(_MPUTransmitProgressReq, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_MPUTransmitProgressResp(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x2),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_MPUTransmitProgressReq,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > _MPUTransmitProgressResp) {
            if (_callback)
                _callback(_internalCallStatus, _MPUTransmitProgressResp.getValue());
        },
        std::make_tuple(deploy_MPUTransmitProgressResp));
}

void FOTAMPUUpdateSomeIPProxy::StopUpdt(FOTAMPUUpdate::MPUUpdateStopReq _MPUUpdateStopReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUUpdateStopResp &_MPUUpdateStopResp, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< FOTAMPUUpdate::MPUUpdateStopReq, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUUpdateStopReqDeployment_t> deploy_MPUUpdateStopReq(_MPUUpdateStopReq, &::v1::commonapi::ota::FOTAMPUUpdate_::StopUpdt_MPUUpdateStopReqDeployment);
    CommonAPI::Deployable< FOTAMPUUpdate::MPUUpdateStopResp, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUUpdateStopRespDeployment_t> deploy_MPUUpdateStopResp(&::v1::commonapi::ota::FOTAMPUUpdate_::StopUpdt_MPUUpdateStopRespDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                FOTAMPUUpdate::MPUUpdateStopReq,
                ::v1::commonapi::ota::FOTAMPUUpdate_::MPUUpdateStopReqDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                FOTAMPUUpdate::MPUUpdateStopResp,
                ::v1::commonapi::ota::FOTAMPUUpdate_::MPUUpdateStopRespDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x3),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_MPUUpdateStopReq,
        _internalCallStatus,
        deploy_MPUUpdateStopResp);
    _MPUUpdateStopResp = deploy_MPUUpdateStopResp.getValue();
}

std::future<CommonAPI::CallStatus> FOTAMPUUpdateSomeIPProxy::StopUpdtAsync(const FOTAMPUUpdate::MPUUpdateStopReq &_MPUUpdateStopReq, StopUpdtAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< FOTAMPUUpdate::MPUUpdateStopReq, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUUpdateStopReqDeployment_t> deploy_MPUUpdateStopReq(_MPUUpdateStopReq, &::v1::commonapi::ota::FOTAMPUUpdate_::StopUpdt_MPUUpdateStopReqDeployment);
    CommonAPI::Deployable< FOTAMPUUpdate::MPUUpdateStopResp, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUUpdateStopRespDeployment_t> deploy_MPUUpdateStopResp(&::v1::commonapi::ota::FOTAMPUUpdate_::StopUpdt_MPUUpdateStopRespDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                FOTAMPUUpdate::MPUUpdateStopReq,
                ::v1::commonapi::ota::FOTAMPUUpdate_::MPUUpdateStopReqDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                FOTAMPUUpdate::MPUUpdateStopResp,
                ::v1::commonapi::ota::FOTAMPUUpdate_::MPUUpdateStopRespDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x3),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_MPUUpdateStopReq,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< FOTAMPUUpdate::MPUUpdateStopResp, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUUpdateStopRespDeployment_t > _MPUUpdateStopResp) {
            if (_callback)
                _callback(_internalCallStatus, _MPUUpdateStopResp.getValue());
        },
        std::make_tuple(deploy_MPUUpdateStopResp));
}

void FOTAMPUUpdateSomeIPProxy::StartInst(uint16_t _MPUInstallStartReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUInstallStartResp &_MPUInstallStartResp, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_MPUInstallStartReq(_MPUInstallStartReq, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::Deployable< FOTAMPUUpdate::MPUInstallStartResp, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUInstallStartRespDeployment_t> deploy_MPUInstallStartResp(&::v1::commonapi::ota::FOTAMPUUpdate_::StartInst_MPUInstallStartRespDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                FOTAMPUUpdate::MPUInstallStartResp,
                ::v1::commonapi::ota::FOTAMPUUpdate_::MPUInstallStartRespDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x4),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_MPUInstallStartReq,
        _internalCallStatus,
        deploy_MPUInstallStartResp);
    _MPUInstallStartResp = deploy_MPUInstallStartResp.getValue();
}

std::future<CommonAPI::CallStatus> FOTAMPUUpdateSomeIPProxy::StartInstAsync(const uint16_t &_MPUInstallStartReq, StartInstAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_MPUInstallStartReq(_MPUInstallStartReq, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::Deployable< FOTAMPUUpdate::MPUInstallStartResp, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUInstallStartRespDeployment_t> deploy_MPUInstallStartResp(&::v1::commonapi::ota::FOTAMPUUpdate_::StartInst_MPUInstallStartRespDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                FOTAMPUUpdate::MPUInstallStartResp,
                ::v1::commonapi::ota::FOTAMPUUpdate_::MPUInstallStartRespDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x4),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_MPUInstallStartReq,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< FOTAMPUUpdate::MPUInstallStartResp, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUInstallStartRespDeployment_t > _MPUInstallStartResp) {
            if (_callback)
                _callback(_internalCallStatus, _MPUInstallStartResp.getValue());
        },
        std::make_tuple(deploy_MPUInstallStartResp));
}

void FOTAMPUUpdateSomeIPProxy::ReqInstResult(uint16_t _MPUInstallResultReq, CommonAPI::CallStatus &_internalCallStatus, std::string &_MPUInstallResultResp, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_MPUInstallResultReq(_MPUInstallResultReq, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_MPUInstallResultResp(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x5),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_MPUInstallResultReq,
        _internalCallStatus,
        deploy_MPUInstallResultResp);
    _MPUInstallResultResp = deploy_MPUInstallResultResp.getValue();
}

std::future<CommonAPI::CallStatus> FOTAMPUUpdateSomeIPProxy::ReqInstResultAsync(const uint16_t &_MPUInstallResultReq, ReqInstResultAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_MPUInstallResultReq(_MPUInstallResultReq, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_MPUInstallResultResp(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x5),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_MPUInstallResultReq,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > _MPUInstallResultResp) {
            if (_callback)
                _callback(_internalCallStatus, _MPUInstallResultResp.getValue());
        },
        std::make_tuple(deploy_MPUInstallResultResp));
}

void FOTAMPUUpdateSomeIPProxy::SwitchABBank(FOTAMPUUpdate::MPUStatusSwitchReq _MPUStatusSwitchReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUStatusSwitchResp &_MPUStatusSwitchResp, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< FOTAMPUUpdate::MPUStatusSwitchReq, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUStatusSwitchReqDeployment_t> deploy_MPUStatusSwitchReq(_MPUStatusSwitchReq, &::v1::commonapi::ota::FOTAMPUUpdate_::SwitchABBank_MPUStatusSwitchReqDeployment);
    CommonAPI::Deployable< FOTAMPUUpdate::MPUStatusSwitchResp, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUStatusSwitchRespDeployment_t> deploy_MPUStatusSwitchResp(&::v1::commonapi::ota::FOTAMPUUpdate_::SwitchABBank_MPUStatusSwitchRespDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                FOTAMPUUpdate::MPUStatusSwitchReq,
                ::v1::commonapi::ota::FOTAMPUUpdate_::MPUStatusSwitchReqDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                FOTAMPUUpdate::MPUStatusSwitchResp,
                ::v1::commonapi::ota::FOTAMPUUpdate_::MPUStatusSwitchRespDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_MPUStatusSwitchReq,
        _internalCallStatus,
        deploy_MPUStatusSwitchResp);
    _MPUStatusSwitchResp = deploy_MPUStatusSwitchResp.getValue();
}

std::future<CommonAPI::CallStatus> FOTAMPUUpdateSomeIPProxy::SwitchABBankAsync(const FOTAMPUUpdate::MPUStatusSwitchReq &_MPUStatusSwitchReq, SwitchABBankAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< FOTAMPUUpdate::MPUStatusSwitchReq, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUStatusSwitchReqDeployment_t> deploy_MPUStatusSwitchReq(_MPUStatusSwitchReq, &::v1::commonapi::ota::FOTAMPUUpdate_::SwitchABBank_MPUStatusSwitchReqDeployment);
    CommonAPI::Deployable< FOTAMPUUpdate::MPUStatusSwitchResp, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUStatusSwitchRespDeployment_t> deploy_MPUStatusSwitchResp(&::v1::commonapi::ota::FOTAMPUUpdate_::SwitchABBank_MPUStatusSwitchRespDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                FOTAMPUUpdate::MPUStatusSwitchReq,
                ::v1::commonapi::ota::FOTAMPUUpdate_::MPUStatusSwitchReqDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                FOTAMPUUpdate::MPUStatusSwitchResp,
                ::v1::commonapi::ota::FOTAMPUUpdate_::MPUStatusSwitchRespDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_MPUStatusSwitchReq,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< FOTAMPUUpdate::MPUStatusSwitchResp, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUStatusSwitchRespDeployment_t > _MPUStatusSwitchResp) {
            if (_callback)
                _callback(_internalCallStatus, _MPUStatusSwitchResp.getValue());
        },
        std::make_tuple(deploy_MPUStatusSwitchResp));
}

void FOTAMPUUpdateSomeIPProxy::GetUpdtTaskStatus(uint16_t _MPUGetStatusReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUGetStatusResp &_MPUGetStatusResp, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_MPUGetStatusReq(_MPUGetStatusReq, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::Deployable< FOTAMPUUpdate::MPUGetStatusResp, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUGetStatusRespDeployment_t> deploy_MPUGetStatusResp(&::v1::commonapi::ota::FOTAMPUUpdate_::GetUpdtTaskStatus_MPUGetStatusRespDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                FOTAMPUUpdate::MPUGetStatusResp,
                ::v1::commonapi::ota::FOTAMPUUpdate_::MPUGetStatusRespDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x8),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_MPUGetStatusReq,
        _internalCallStatus,
        deploy_MPUGetStatusResp);
    _MPUGetStatusResp = deploy_MPUGetStatusResp.getValue();
}

std::future<CommonAPI::CallStatus> FOTAMPUUpdateSomeIPProxy::GetUpdtTaskStatusAsync(const uint16_t &_MPUGetStatusReq, GetUpdtTaskStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_MPUGetStatusReq(_MPUGetStatusReq, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::Deployable< FOTAMPUUpdate::MPUGetStatusResp, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUGetStatusRespDeployment_t> deploy_MPUGetStatusResp(&::v1::commonapi::ota::FOTAMPUUpdate_::GetUpdtTaskStatus_MPUGetStatusRespDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                FOTAMPUUpdate::MPUGetStatusResp,
                ::v1::commonapi::ota::FOTAMPUUpdate_::MPUGetStatusRespDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x8),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_MPUGetStatusReq,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< FOTAMPUUpdate::MPUGetStatusResp, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUGetStatusRespDeployment_t > _MPUGetStatusResp) {
            if (_callback)
                _callback(_internalCallStatus, _MPUGetStatusResp.getValue());
        },
        std::make_tuple(deploy_MPUGetStatusResp));
}

void FOTAMPUUpdateSomeIPProxy::ReqSwitchResult(uint16_t _MPUSwitchResultReq, CommonAPI::CallStatus &_internalCallStatus, std::string &_MPUSwitchResultResp, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_MPUSwitchResultReq(_MPUSwitchResultReq, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_MPUSwitchResultResp(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0xa),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_MPUSwitchResultReq,
        _internalCallStatus,
        deploy_MPUSwitchResultResp);
    _MPUSwitchResultResp = deploy_MPUSwitchResultResp.getValue();
}

std::future<CommonAPI::CallStatus> FOTAMPUUpdateSomeIPProxy::ReqSwitchResultAsync(const uint16_t &_MPUSwitchResultReq, ReqSwitchResultAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_MPUSwitchResultReq(_MPUSwitchResultReq, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_MPUSwitchResultResp(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0xa),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_MPUSwitchResultReq,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > _MPUSwitchResultResp) {
            if (_callback)
                _callback(_internalCallStatus, _MPUSwitchResultResp.getValue());
        },
        std::make_tuple(deploy_MPUSwitchResultResp));
}

void FOTAMPUUpdateSomeIPProxy::GetUpdtTaskLog(FOTAMPUUpdate::MPUGetUpdateLogReq _MPUGetUpdateLogReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUGetUpdateLogResp &_MPUGetUpdateLogResp, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< FOTAMPUUpdate::MPUGetUpdateLogReq, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUGetUpdateLogReqDeployment_t> deploy_MPUGetUpdateLogReq(_MPUGetUpdateLogReq, &::v1::commonapi::ota::FOTAMPUUpdate_::GetUpdtTaskLog_MPUGetUpdateLogReqDeployment);
    CommonAPI::Deployable< FOTAMPUUpdate::MPUGetUpdateLogResp, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUGetUpdateLogRespDeployment_t> deploy_MPUGetUpdateLogResp(&::v1::commonapi::ota::FOTAMPUUpdate_::GetUpdtTaskLog_MPUGetUpdateLogRespDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                FOTAMPUUpdate::MPUGetUpdateLogReq,
                ::v1::commonapi::ota::FOTAMPUUpdate_::MPUGetUpdateLogReqDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                FOTAMPUUpdate::MPUGetUpdateLogResp,
                ::v1::commonapi::ota::FOTAMPUUpdate_::MPUGetUpdateLogRespDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x9),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_MPUGetUpdateLogReq,
        _internalCallStatus,
        deploy_MPUGetUpdateLogResp);
    _MPUGetUpdateLogResp = deploy_MPUGetUpdateLogResp.getValue();
}

std::future<CommonAPI::CallStatus> FOTAMPUUpdateSomeIPProxy::GetUpdtTaskLogAsync(const FOTAMPUUpdate::MPUGetUpdateLogReq &_MPUGetUpdateLogReq, GetUpdtTaskLogAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< FOTAMPUUpdate::MPUGetUpdateLogReq, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUGetUpdateLogReqDeployment_t> deploy_MPUGetUpdateLogReq(_MPUGetUpdateLogReq, &::v1::commonapi::ota::FOTAMPUUpdate_::GetUpdtTaskLog_MPUGetUpdateLogReqDeployment);
    CommonAPI::Deployable< FOTAMPUUpdate::MPUGetUpdateLogResp, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUGetUpdateLogRespDeployment_t> deploy_MPUGetUpdateLogResp(&::v1::commonapi::ota::FOTAMPUUpdate_::GetUpdtTaskLog_MPUGetUpdateLogRespDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                FOTAMPUUpdate::MPUGetUpdateLogReq,
                ::v1::commonapi::ota::FOTAMPUUpdate_::MPUGetUpdateLogReqDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                FOTAMPUUpdate::MPUGetUpdateLogResp,
                ::v1::commonapi::ota::FOTAMPUUpdate_::MPUGetUpdateLogRespDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x9),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_MPUGetUpdateLogReq,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< FOTAMPUUpdate::MPUGetUpdateLogResp, ::v1::commonapi::ota::FOTAMPUUpdate_::MPUGetUpdateLogRespDeployment_t > _MPUGetUpdateLogResp) {
            if (_callback)
                _callback(_internalCallStatus, _MPUGetUpdateLogResp.getValue());
        },
        std::make_tuple(deploy_MPUGetUpdateLogResp));
}

void FOTAMPUUpdateSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

std::future<void> FOTAMPUUpdateSomeIPProxy::getCompletionFuture() {
    return CommonAPI::SomeIP::Proxy::getCompletionFuture();
}

} // namespace ota
} // namespace commonapi
} // namespace v1
