/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.15.v202410041619.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_OTA_FOTAMPU_Update_PROXY_BASE_HPP_
#define V1_COMMONAPI_OTA_FOTAMPU_Update_PROXY_BASE_HPP_

#include <v1/commonapi/ota/FOTAMPUUpdate.hpp>



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace commonapi {
namespace ota {

class FOTAMPUUpdateProxyBase
    : virtual public CommonAPI::Proxy {
public:

    typedef std::function<void(const CommonAPI::CallStatus&, const FOTAMPUUpdate::MPUUpdateTaskBuildingResp&)> BldUpdtTaskAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&)> StwrTrsmtPrgsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const FOTAMPUUpdate::MPUUpdateStopResp&)> StopUpdtAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const FOTAMPUUpdate::MPUInstallStartResp&)> StartInstAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&)> ReqInstResultAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const FOTAMPUUpdate::MPUStatusSwitchResp&)> SwitchABBankAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const FOTAMPUUpdate::MPUGetStatusResp&)> GetUpdtTaskStatusAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&)> ReqSwitchResultAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const FOTAMPUUpdate::MPUGetUpdateLogResp&)> GetUpdtTaskLogAsyncCallback;

    virtual void BldUpdtTask(std::string _MPUUpdateTaskBuildingReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUUpdateTaskBuildingResp &_MPUUpdateTaskBuildingResp, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> BldUpdtTaskAsync(const std::string &_MPUUpdateTaskBuildingReq, BldUpdtTaskAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void StwrTrsmtPrgs(uint16_t _MPUTransmitProgressReq, CommonAPI::CallStatus &_internalCallStatus, std::string &_MPUTransmitProgressResp, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> StwrTrsmtPrgsAsync(const uint16_t &_MPUTransmitProgressReq, StwrTrsmtPrgsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void StopUpdt(FOTAMPUUpdate::MPUUpdateStopReq _MPUUpdateStopReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUUpdateStopResp &_MPUUpdateStopResp, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> StopUpdtAsync(const FOTAMPUUpdate::MPUUpdateStopReq &_MPUUpdateStopReq, StopUpdtAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void StartInst(uint16_t _MPUInstallStartReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUInstallStartResp &_MPUInstallStartResp, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> StartInstAsync(const uint16_t &_MPUInstallStartReq, StartInstAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void ReqInstResult(uint16_t _MPUInstallResultReq, CommonAPI::CallStatus &_internalCallStatus, std::string &_MPUInstallResultResp, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> ReqInstResultAsync(const uint16_t &_MPUInstallResultReq, ReqInstResultAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void SwitchABBank(FOTAMPUUpdate::MPUStatusSwitchReq _MPUStatusSwitchReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUStatusSwitchResp &_MPUStatusSwitchResp, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SwitchABBankAsync(const FOTAMPUUpdate::MPUStatusSwitchReq &_MPUStatusSwitchReq, SwitchABBankAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void GetUpdtTaskStatus(uint16_t _MPUGetStatusReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUGetStatusResp &_MPUGetStatusResp, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetUpdtTaskStatusAsync(const uint16_t &_MPUGetStatusReq, GetUpdtTaskStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void ReqSwitchResult(uint16_t _MPUSwitchResultReq, CommonAPI::CallStatus &_internalCallStatus, std::string &_MPUSwitchResultResp, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> ReqSwitchResultAsync(const uint16_t &_MPUSwitchResultReq, ReqSwitchResultAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void GetUpdtTaskLog(FOTAMPUUpdate::MPUGetUpdateLogReq _MPUGetUpdateLogReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUGetUpdateLogResp &_MPUGetUpdateLogResp, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetUpdtTaskLogAsync(const FOTAMPUUpdate::MPUGetUpdateLogReq &_MPUGetUpdateLogReq, GetUpdtTaskLogAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;

    virtual std::future<void> getCompletionFuture() = 0;
};

} // namespace ota
} // namespace commonapi
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COMMONAPI_OTA_FOTAMPU_Update_PROXY_BASE_HPP_
