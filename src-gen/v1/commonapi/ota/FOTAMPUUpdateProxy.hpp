/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.15.v202410041619.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_OTA_FOTAMPU_Update_PROXY_HPP_
#define V1_COMMONAPI_OTA_FOTAMPU_Update_PROXY_HPP_

#include <v1/commonapi/ota/FOTAMPUUpdateProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif


#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace commonapi {
namespace ota {

template <typename ... _AttributeExtensions>
class FOTAMPUUpdateProxy
    : virtual public FOTAMPUUpdate,
      virtual public FOTAMPUUpdateProxyBase,
      virtual public _AttributeExtensions... {
public:
    FOTAMPUUpdateProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~FOTAMPUUpdateProxy();

    typedef ::v1::commonapi::ota::FOTAMPUUpdate InterfaceType;


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

    virtual std::future<void> getCompletionFuture();

    /**
     * Calls BldUpdtTask with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void BldUpdtTask(std::string _MPUUpdateTaskBuildingReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUUpdateTaskBuildingResp &_MPUUpdateTaskBuildingResp, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls BldUpdtTask with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> BldUpdtTaskAsync(const std::string &_MPUUpdateTaskBuildingReq, BldUpdtTaskAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls StwrTrsmtPrgs with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void StwrTrsmtPrgs(uint16_t _MPUTransmitProgressReq, CommonAPI::CallStatus &_internalCallStatus, std::string &_MPUTransmitProgressResp, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls StwrTrsmtPrgs with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> StwrTrsmtPrgsAsync(const uint16_t &_MPUTransmitProgressReq, StwrTrsmtPrgsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls StopUpdt with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void StopUpdt(FOTAMPUUpdate::MPUUpdateStopReq _MPUUpdateStopReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUUpdateStopResp &_MPUUpdateStopResp, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls StopUpdt with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> StopUpdtAsync(const FOTAMPUUpdate::MPUUpdateStopReq &_MPUUpdateStopReq, StopUpdtAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls StartInst with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void StartInst(uint16_t _MPUInstallStartReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUInstallStartResp &_MPUInstallStartResp, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls StartInst with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> StartInstAsync(const uint16_t &_MPUInstallStartReq, StartInstAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls ReqInstResult with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void ReqInstResult(uint16_t _MPUInstallResultReq, CommonAPI::CallStatus &_internalCallStatus, std::string &_MPUInstallResultResp, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls ReqInstResult with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> ReqInstResultAsync(const uint16_t &_MPUInstallResultReq, ReqInstResultAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SwitchABBank with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SwitchABBank(FOTAMPUUpdate::MPUStatusSwitchReq _MPUStatusSwitchReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUStatusSwitchResp &_MPUStatusSwitchResp, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SwitchABBank with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SwitchABBankAsync(const FOTAMPUUpdate::MPUStatusSwitchReq &_MPUStatusSwitchReq, SwitchABBankAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetUpdtTaskStatus with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetUpdtTaskStatus(uint16_t _MPUGetStatusReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUGetStatusResp &_MPUGetStatusResp, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetUpdtTaskStatus with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetUpdtTaskStatusAsync(const uint16_t &_MPUGetStatusReq, GetUpdtTaskStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls ReqSwitchResult with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void ReqSwitchResult(uint16_t _MPUSwitchResultReq, CommonAPI::CallStatus &_internalCallStatus, std::string &_MPUSwitchResultResp, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls ReqSwitchResult with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> ReqSwitchResultAsync(const uint16_t &_MPUSwitchResultReq, ReqSwitchResultAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);



 private:
    std::shared_ptr< FOTAMPUUpdateProxyBase> delegate_;
};

typedef FOTAMPUUpdateProxy<> FOTAMPUUpdateProxyDefault;


//
// FOTAMPUUpdateProxy Implementation
//
template <typename ... _AttributeExtensions>
FOTAMPUUpdateProxy<_AttributeExtensions...>::FOTAMPUUpdateProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< FOTAMPUUpdateProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< FOTAMPUUpdateProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
FOTAMPUUpdateProxy<_AttributeExtensions...>::~FOTAMPUUpdateProxy() {
}

template <typename ... _AttributeExtensions>
void FOTAMPUUpdateProxy<_AttributeExtensions...>::BldUpdtTask(std::string _MPUUpdateTaskBuildingReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUUpdateTaskBuildingResp &_MPUUpdateTaskBuildingResp, const CommonAPI::CallInfo *_info) {
    delegate_->BldUpdtTask(_MPUUpdateTaskBuildingReq, _internalCallStatus, _MPUUpdateTaskBuildingResp, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> FOTAMPUUpdateProxy<_AttributeExtensions...>::BldUpdtTaskAsync(const std::string &_MPUUpdateTaskBuildingReq, BldUpdtTaskAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->BldUpdtTaskAsync(_MPUUpdateTaskBuildingReq, _callback, _info);
}
template <typename ... _AttributeExtensions>
void FOTAMPUUpdateProxy<_AttributeExtensions...>::StwrTrsmtPrgs(uint16_t _MPUTransmitProgressReq, CommonAPI::CallStatus &_internalCallStatus, std::string &_MPUTransmitProgressResp, const CommonAPI::CallInfo *_info) {
    delegate_->StwrTrsmtPrgs(_MPUTransmitProgressReq, _internalCallStatus, _MPUTransmitProgressResp, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> FOTAMPUUpdateProxy<_AttributeExtensions...>::StwrTrsmtPrgsAsync(const uint16_t &_MPUTransmitProgressReq, StwrTrsmtPrgsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->StwrTrsmtPrgsAsync(_MPUTransmitProgressReq, _callback, _info);
}
template <typename ... _AttributeExtensions>
void FOTAMPUUpdateProxy<_AttributeExtensions...>::StopUpdt(FOTAMPUUpdate::MPUUpdateStopReq _MPUUpdateStopReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUUpdateStopResp &_MPUUpdateStopResp, const CommonAPI::CallInfo *_info) {
    delegate_->StopUpdt(_MPUUpdateStopReq, _internalCallStatus, _MPUUpdateStopResp, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> FOTAMPUUpdateProxy<_AttributeExtensions...>::StopUpdtAsync(const FOTAMPUUpdate::MPUUpdateStopReq &_MPUUpdateStopReq, StopUpdtAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->StopUpdtAsync(_MPUUpdateStopReq, _callback, _info);
}
template <typename ... _AttributeExtensions>
void FOTAMPUUpdateProxy<_AttributeExtensions...>::StartInst(uint16_t _MPUInstallStartReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUInstallStartResp &_MPUInstallStartResp, const CommonAPI::CallInfo *_info) {
    delegate_->StartInst(_MPUInstallStartReq, _internalCallStatus, _MPUInstallStartResp, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> FOTAMPUUpdateProxy<_AttributeExtensions...>::StartInstAsync(const uint16_t &_MPUInstallStartReq, StartInstAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->StartInstAsync(_MPUInstallStartReq, _callback, _info);
}
template <typename ... _AttributeExtensions>
void FOTAMPUUpdateProxy<_AttributeExtensions...>::ReqInstResult(uint16_t _MPUInstallResultReq, CommonAPI::CallStatus &_internalCallStatus, std::string &_MPUInstallResultResp, const CommonAPI::CallInfo *_info) {
    delegate_->ReqInstResult(_MPUInstallResultReq, _internalCallStatus, _MPUInstallResultResp, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> FOTAMPUUpdateProxy<_AttributeExtensions...>::ReqInstResultAsync(const uint16_t &_MPUInstallResultReq, ReqInstResultAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->ReqInstResultAsync(_MPUInstallResultReq, _callback, _info);
}
template <typename ... _AttributeExtensions>
void FOTAMPUUpdateProxy<_AttributeExtensions...>::SwitchABBank(FOTAMPUUpdate::MPUStatusSwitchReq _MPUStatusSwitchReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUStatusSwitchResp &_MPUStatusSwitchResp, const CommonAPI::CallInfo *_info) {
    delegate_->SwitchABBank(_MPUStatusSwitchReq, _internalCallStatus, _MPUStatusSwitchResp, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> FOTAMPUUpdateProxy<_AttributeExtensions...>::SwitchABBankAsync(const FOTAMPUUpdate::MPUStatusSwitchReq &_MPUStatusSwitchReq, SwitchABBankAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->SwitchABBankAsync(_MPUStatusSwitchReq, _callback, _info);
}
template <typename ... _AttributeExtensions>
void FOTAMPUUpdateProxy<_AttributeExtensions...>::GetUpdtTaskStatus(uint16_t _MPUGetStatusReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUGetStatusResp &_MPUGetStatusResp, const CommonAPI::CallInfo *_info) {
    delegate_->GetUpdtTaskStatus(_MPUGetStatusReq, _internalCallStatus, _MPUGetStatusResp, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> FOTAMPUUpdateProxy<_AttributeExtensions...>::GetUpdtTaskStatusAsync(const uint16_t &_MPUGetStatusReq, GetUpdtTaskStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetUpdtTaskStatusAsync(_MPUGetStatusReq, _callback, _info);
}
template <typename ... _AttributeExtensions>
void FOTAMPUUpdateProxy<_AttributeExtensions...>::ReqSwitchResult(uint16_t _MPUSwitchResultReq, CommonAPI::CallStatus &_internalCallStatus, std::string &_MPUSwitchResultResp, const CommonAPI::CallInfo *_info) {
    delegate_->ReqSwitchResult(_MPUSwitchResultReq, _internalCallStatus, _MPUSwitchResultResp, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> FOTAMPUUpdateProxy<_AttributeExtensions...>::ReqSwitchResultAsync(const uint16_t &_MPUSwitchResultReq, ReqSwitchResultAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->ReqSwitchResultAsync(_MPUSwitchResultReq, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &FOTAMPUUpdateProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool FOTAMPUUpdateProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool FOTAMPUUpdateProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& FOTAMPUUpdateProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& FOTAMPUUpdateProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


template <typename ... _AttributeExtensions>
std::future<void> FOTAMPUUpdateProxy<_AttributeExtensions...>::getCompletionFuture() {
    return delegate_->getCompletionFuture();
}

} // namespace ota
} // namespace commonapi
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_COMMONAPI_OTA_FOTAMPU_Update_PROXY_HPP_
