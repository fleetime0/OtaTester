/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.15.v202410041637.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V1_COMMONAPI_OTA_FOTAMPU_UPDATE_SOMEIP_PROXY_HPP_
#define V1_COMMONAPI_OTA_FOTAMPU_UPDATE_SOMEIP_PROXY_HPP_

#include <v1/commonapi/ota/FOTAMPUUpdateProxyBase.hpp>
#include <v1/commonapi/ota/FOTAMPUUpdateSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Proxy.hpp>
#include <CommonAPI/SomeIP/Types.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <string>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace commonapi {
namespace ota {

class FOTAMPUUpdateSomeIPProxy
    : virtual public FOTAMPUUpdateProxyBase,
      virtual public CommonAPI::SomeIP::Proxy {
public:
    FOTAMPUUpdateSomeIPProxy(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection);

    virtual ~FOTAMPUUpdateSomeIPProxy();

    virtual void BldUpdtTask(std::string _MPUUpdateTaskBuildingReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUUpdateTaskBuildingResp &_MPUUpdateTaskBuildingResp, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> BldUpdtTaskAsync(const std::string &_MPUUpdateTaskBuildingReq, BldUpdtTaskAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void StwrTrsmtPrgs(uint16_t _MPUTransmitProgressReq, CommonAPI::CallStatus &_internalCallStatus, std::string &_MPUTransmitProgressResp, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> StwrTrsmtPrgsAsync(const uint16_t &_MPUTransmitProgressReq, StwrTrsmtPrgsAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void StopUpdt(FOTAMPUUpdate::MPUUpdateStopReq _MPUUpdateStopReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUUpdateStopResp &_MPUUpdateStopResp, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> StopUpdtAsync(const FOTAMPUUpdate::MPUUpdateStopReq &_MPUUpdateStopReq, StopUpdtAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void StartInst(uint16_t _MPUInstallStartReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUInstallStartResp &_MPUInstallStartResp, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> StartInstAsync(const uint16_t &_MPUInstallStartReq, StartInstAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void ReqInstResult(uint16_t _MPUInstallResultReq, CommonAPI::CallStatus &_internalCallStatus, std::string &_MPUInstallResultResp, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> ReqInstResultAsync(const uint16_t &_MPUInstallResultReq, ReqInstResultAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void SwitchABBank(FOTAMPUUpdate::MPUStatusSwitchReq _MPUStatusSwitchReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUStatusSwitchResp &_MPUStatusSwitchResp, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> SwitchABBankAsync(const FOTAMPUUpdate::MPUStatusSwitchReq &_MPUStatusSwitchReq, SwitchABBankAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void GetUpdtTaskStatus(uint16_t _MPUGetStatusReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUGetStatusResp &_MPUGetStatusResp, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> GetUpdtTaskStatusAsync(const uint16_t &_MPUGetStatusReq, GetUpdtTaskStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void ReqSwitchResult(uint16_t _MPUSwitchResultReq, CommonAPI::CallStatus &_internalCallStatus, std::string &_MPUSwitchResultResp, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> ReqSwitchResultAsync(const uint16_t &_MPUSwitchResultReq, ReqSwitchResultAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void GetUpdtTaskLog(FOTAMPUUpdate::MPUGetUpdateLogReq _MPUGetUpdateLogReq, CommonAPI::CallStatus &_internalCallStatus, FOTAMPUUpdate::MPUGetUpdateLogResp &_MPUGetUpdateLogResp, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> GetUpdtTaskLogAsync(const FOTAMPUUpdate::MPUGetUpdateLogReq &_MPUGetUpdateLogReq, GetUpdtTaskLogAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void getOwnVersion(uint16_t &_major, uint16_t &_minor) const;

    virtual std::future<void> getCompletionFuture();

private:

};

} // namespace ota
} // namespace commonapi
} // namespace v1

#endif // V1_COMMONAPI_OTA_FOTAMPU_Update_SOMEIP_PROXY_HPP_
